AWSTemplateFormatVersion: '2010-09-09'
Description: 'Kube Credentials - Simplified ECS Services'

Parameters:
  ProjectName:
    Type: String
    Default: kube-credentials
    Description: Name of the project
  
  Environment:
    Type: String
    Default: production
    Description: Environment name

  IssuerImageURI:
    Type: String
    Description: URI of the Issuer service Docker image in ECR
    
  VerifierImageURI:
    Type: String
    Description: URI of the Verifier service Docker image in ECR
    
  FrontendImageURI:
    Type: String
    Description: URI of the Frontend Docker image in ECR

Resources:
  # ===================== CLOUDWATCH LOG GROUPS =====================
  IssuerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${ProjectName}-issuer
      RetentionInDays: 7

  VerifierLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${ProjectName}-verifier
      RetentionInDays: 7

  FrontendLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${ProjectName}-frontend
      RetentionInDays: 7

  # ===================== IAM ROLES =====================
  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-ecs-execution-role

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-ecs-task-role

  # ===================== IMPORTED RESOURCES =====================

  # ===================== ECS TASK DEFINITIONS =====================
  IssuerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${ProjectName}-issuer
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !Ref ECSExecutionRole
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        - Name: issuer
          Image: !Ref IssuerImageURI
          Essential: true
          PortMappings:
            - ContainerPort: 3001
              Protocol: tcp
          Environment:
            - Name: PORT
              Value: "3001"
            - Name: DB_PATH
              Value: "/app/issuer.db"
            - Name: NODE_ENV
              Value: !Ref Environment
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref IssuerLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  VerifierTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${ProjectName}-verifier
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !Ref ECSExecutionRole
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        - Name: verifier
          Image: !Ref VerifierImageURI
          Essential: true
          PortMappings:
            - ContainerPort: 4002
              Protocol: tcp
          Environment:
            - Name: PORT
              Value: "4002"
            - Name: DB_PATH
              Value: "/app/verifier.db"
            - Name: ISSUER_SERVICE_URL
              Value: "http://kube-credentials-alb-904715878.us-east-1.elb.amazonaws.com:3001"
            - Name: NODE_ENV
              Value: !Ref Environment
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref VerifierLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  FrontendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${ProjectName}-frontend
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !Ref ECSExecutionRole
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        - Name: frontend
          Image: !Ref FrontendImageURI
          Essential: true
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
          Environment:
            - Name: NODE_ENV
              Value: !Ref Environment
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref FrontendLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  # ===================== ECS SERVICES =====================
  IssuerService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub ${ProjectName}-issuer
      Cluster: 
        Fn::ImportValue: !Sub ${ProjectName}-ECS-Cluster
      TaskDefinition: !Ref IssuerTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
        - TargetGroupArn: !ImportValue
            Fn::Sub: ${ProjectName}-Issuer-TG-ARN
          ContainerName: issuer
          ContainerPort: 3001
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets: !Split
            - ','
            - !ImportValue
                Fn::Sub: ${ProjectName}-Public-Subnets
          SecurityGroups:
            - !ImportValue
                Fn::Sub: ${ProjectName}-ECS-SecurityGroup-ID

  VerifierService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub ${ProjectName}-verifier
      Cluster: 
        Fn::ImportValue: !Sub ${ProjectName}-ECS-Cluster
      TaskDefinition: !Ref VerifierTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
        - TargetGroupArn: !ImportValue
            Fn::Sub: ${ProjectName}-Verifier-TG-ARN
          ContainerName: verifier
          ContainerPort: 4002
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets: !Split
            - ','
            - !ImportValue
                Fn::Sub: ${ProjectName}-Public-Subnets
          SecurityGroups:
            - !ImportValue
                Fn::Sub: ${ProjectName}-ECS-SecurityGroup-ID

  FrontendService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub ${ProjectName}-frontend
      Cluster: 
        Fn::ImportValue: !Sub ${ProjectName}-ECS-Cluster
      TaskDefinition: !Ref FrontendTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
        - TargetGroupArn: !ImportValue
            Fn::Sub: ${ProjectName}-Frontend-TG-ARN
          ContainerName: frontend
          ContainerPort: 80
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets: !Split
            - ','
            - !ImportValue
                Fn::Sub: ${ProjectName}-Public-Subnets
          SecurityGroups:
            - !ImportValue
                Fn::Sub: ${ProjectName}-ECS-SecurityGroup-ID

Outputs:
  IssuerServiceArn:
    Description: ARN of the Issuer ECS Service
    Value: !Ref IssuerService

  VerifierServiceArn:
    Description: ARN of the Verifier ECS Service
    Value: !Ref VerifierService

  FrontendServiceArn:
    Description: ARN of the Frontend ECS Service
    Value: !Ref FrontendService



  DeploymentInfo:
    Description: Information about the deployment
    Value: !Sub |
      Kube Credentials has been deployed to AWS ECS Fargate!
      
      Services deployed:
      - Issuer Service: Port 3001
      - Verifier Service: Port 4002
      - Frontend Service: Port 80
      
      To access the services:
      1. Go to ECS Console -> Clusters -> ${ProjectName}-cluster
      2. Click on each service to see running tasks
      3. Click on a task to get the public IP address
      4. Access the services using the public IP and respective ports
      
      Note: Services are using separate SQLite databases as required.